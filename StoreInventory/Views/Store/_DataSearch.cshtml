
@model StoreInventory.ViewModels.StoreInventoryOverviewVm

@{
    var data = Model.InventoryDbItems != null ? Model.InventoryDbItems : "";
}
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>


<div class="panel panel-default">
    <div class="panel-heading">
        <div class="panel-title">
            <i class="fa fa-bar-chart" aria-hidden="true"></i>
             Data Visualisation
        </div>
    </div>

    
    <div class="panel-body" id="SearchData">
        @using (Ajax.BeginForm("ViewDataByDate", "Store", new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "divEmp" }, new { id = "DatesCheck" }))
        {
            @Html.ValidationSummary(true);
            <div>
                @Html.ValidationMessageFor(f => f.FromTime, "", new {@style = "color:red; padding-right:25%;" })
                @Html.ValidationMessageFor(f => f.ToTime, "", new { @style = "color:red;" })
            </div>


            @Html.LabelFor(l => l.FromTime, "From", new { @style = "padding-right:5%;padding-left:1%;" });
            @Html.TextBoxFor(model => model.FromTime,
            new { @type = "date", @Value = Model.FromTime })


            @Html.LabelFor(l => l.ToTime, "To", new { @style = "padding-right:5%;padding-left:1%;" });
            @Html.TextBoxFor(model => model.ToTime,
            new { @type = "date", @Value = Model.ToTime })


            <button type="submit">View Data</button>
        }
        <div id="chartdiv"></div>

  
            <div style="width:100%;">
                <i class="fa fa-clock-o" aria-hidden="true"></i>
                
                <span> Most Important Time of the day (24hr): &nbsp; <strong><span id="ImportantTime"></span></strong> </span>

            </div>
      



     

    </div>

</div>


<script src="https://www.amcharts.com/lib/4/core.js"></script>
<script src="https://www.amcharts.com/lib/4/charts.js"></script>
<script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>
<script>




    $('#DatesCheck').submit(function (e) {


        if ($('#DatesCheck').valid()) {
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(), //if you need to post Model data, use this
                success: function (result) {

                }
            });
        }
        else {
            alert("nope");
        }

      
    })


    am4core.ready(function () {
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create("chartdiv", am4charts.XYChart);
        console.log(chart);

    // Add data
        var data = @Html.Raw(data);
        console.log(data);

        chart.data = [{
              "parameter": "MaxPrice",
              "value": data.MaxPrice
            },
            {
              "parameter": "MinPrice",
              "value": data.MinPrice
            },
            {
              "parameter": "Average",
              "value": data.AvgPrice
            },
            {
              "notParameter": "ImportantTime",
              "value": data.ImportantTime
            }

        ];


        document.getElementById('ImportantTime').innerHTML = data.ImportantTime;


    // Create axes


        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "parameter";
        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.minGridDistance = 30;


        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

        // Create series
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.valueY = "value";
        series.dataFields.categoryX = "parameter";
        series.name = "value";
        series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
        series.columns.template.fillOpacity = .8;

    });


</script>